# get the id of the current model
SEND "GET_ACTIVE_MODEL" to:"Modeling" answer:modelid
IF (modelid = "")
{
   CC "AdoScript" ERRORBOX "Open a model first!"
   EXIT
}

# We retrieve all objects of the class with the name Start
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL modelid) classname: "brauStart"

# We make sure that there is exactly 1 Start object, otherwise we terminate
IF (tokcnt(objids) != 1) {
    CC "AdoScript" WARNINGBOX "Es braucht genau ein brauStart-Objekt!"
    EXIT
}

SET startids:(objids)
WHILE (tokcnt(startids)>0) {
    # We store the current list of remaining objects for iterating over them
    SET currentbatch:(startids)
    
    # We iterate over all remaining objects 
    FOR o in:(currentbatch) {
		SET startid: (VAL o)
	}
	SET startids:(tokdiff(startids,o))
}

# We get the class id of the different classes 
CC "Core" GET_CLASS_ID classname:"Sud"
SET sudclassid:(classid)

CC "Core" GET_CLASS_ID classname:"brauStart"
SET startclassid:(classid)

CC "Core" GET_CLASS_ID classname:"brauEnde"
SET endeclassid:(classid)

CC "Core" GET_CLASS_ID classname:"Prozess"
SET prozessclassid:(classid)

CC "Core" GET_CLASS_ID classname:"Sudhaus"
SET sudhausclassid:(classid)

CC "Core" GET_CLASS_ID classname:"Gärtank"
SET gärtankclassid:(classid)

CC "Core" GET_CLASS_ID classname:"Lagertank"
SET lagertankclassid:(classid)

CC "Core" GET_CLASS_ID classname:"Lager"
SET lagerclassid:(classid)

CC "Core" GET_CLASS_ID classname:"Abfüllen"
SET abfüllenclassid:(classid)

CC "Core" GET_CLASS_ID classname:"Sonstiges"
SET sonstigesclassid:(classid)

CC "Core" GET_CLASS_ID classname:"brauRessource"
SET ressourceclassid:(classid)

CC "Core" GET_CLASS_ID classname:"Kontrollstrukturen"
SET ksclassid:(classid)

CC "Core" GET_CLASS_ID classname:"Entscheidung"
SET entscheidungclassid:(classid)

CC "Core" GET_CLASS_ID classname:"Kombination"
SET kombinationclassid:(classid)

CC "Core" GET_CLASS_ID classname:"Parallelität"
SET parallelitätclassid:(classid)

#Update ATTR "ID" of all Ressources-Objects
# We retrieve all objects of the class with the name brauRessource
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL modelid) classname: "brauRessource"

SET reids:(objids)
SET renr:1
WHILE (tokcnt(reids)>0) {
    # We store the current list of remaining objects for iterating over them
    SET currentbatch:(reids)
	    
    # We iterate over all remaining objects 
    FOR o in:(currentbatch) {
		SET reid: (VAL o)
		CC "Core" SET_ATTR_VAL objid: (reid) attrname: "ID" val: (renr)
		#TODO: Iterate over all ingoing connectors and update Ressource-Record
		CC "Core" GET_CONNECTORS objid:(reid) in
		# We iterate over all these outgoing connectors
		FOR r in:(objids) {
			# We get the endpoints of the current connector
			CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL r)
			SETL endpointID: (fromobjid)
			CC "Core" GET_CLASS_ID objid: (endpointID)
			SET fromclassid: (classid)
			  CC "Core" GET_ATTR_ID classid: (fromclassid) attrname: ("Ressource")
			  SETL id_record: (attrid)
			  # get the interref count and loop through to find the correct one to delete
			  CC "Core" GET_REC_ATTR_ROW_COUNT objid: (endpointID) attrid: (id_record)
			  FOR i from:1 to: (count) {
					CC "Core" GET_REC_ATTR_ROW_ID objid: (endpointID)  attrid: (id_record) index: (i)
					SETL rowID: (rowid)
					# get the attribute ID of the INTERREF column
						CC "Core" GET_CLASS_ID objid: (rowID)
					SETL nRowClassID: (classid)
					CC "Core" GET_ATTR_ID classid: (nRowClassID) attrname: ("Ressource")
					SETL nColumnKeyAttrID: (attrid)
					CC "Core" GET_ATTR_ID classid: (nRowClassID) attrname: ("ID")
					SETL idAttrID: (attrid)
					# Get the values
					CC "Core" GET_INTERREF objid: (rowID) attrid: (nColumnKeyAttrID)  
				IF (tobjid = reid) {
					CC "Core" SET_ATTR_VAL objid: (rowID)  attrid: (idAttrID) val: (renr)
			  }
			}
		}
	SET renr:(renr+1)	
	SET reids:(tokdiff(reids,o))
	}
}

#Update ATTR "Ressourcen" of Start-Object
CC "Core" SET_ATTR_VAL objid: (startid) attrname: "Ressourcen" val: (renr-1)
CC "Core" SET_ATTR_VAL objid: (startid) attrname: "Station" val: 1
CC "Core" SET_ATTR_VAL objid: (startid) attrname: "Vorgänger" val: "Start"

# This is a variable for storing the objects that shall be visited next
SET remainingids:""

# Get starter set: We get the outgoing connectors from the start object
CC "Core" GET_CONNECTORS objid:(startid) out
# We iterate over all these outgoing connectors
FOR r in:(objids) {
	# We get the endpoints of the current connector
	CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL r)
	SET remainingids:(tokunion(remainingids,STR toobjid))
}

# This is a variable keeping track of the objects already visited (to avoid loops)
SET visitedobjs:""

# This is a variable keeping track of the stations
SET cstations:1

#This is a variable used for the predecessors
SET pred:""

# As long as there are object remaining, we continue with the execution
WHILE (tokcnt(remainingids)>0) {
    # We store the current list of remaining objects for iterating over them
    SET currentbatch:(remainingids)
    
    # We iterate over all remaining objects 
    FOR o in:(currentbatch) {
		SET currentid:(VAL o)
		# We get the outgoing connectors from the current object
		CC "Core" GET_CONNECTORS objid:(currentid) in
		# We iterate over all these outgoing connectors
		SET lstations:0
		FOR r in:(objids) {
			# We get the endpoints of the current connector
			CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL r)
			# We get the class id of the to-object of the current connector
			CC "Core" GET_CLASS_ID objid:(fromobjid)		
			IF (classid = sudhausclassid OR classid = gärtankclassid OR classid = lagertankclassid OR classid = abfüllenclassid OR classid = lagerclassid OR classid = sonstigesclassid) {
				CC "Core" GET_ATTR_VAL objid: (fromobjid) attrname: "Station" 
				IF (val > lstations) {
					SET lstations: (val+1)
				}
				CC "Core" GET_OBJ_NAME objid: (fromobjid) 
				SETL predName: (objname)
				pred: (tokunion(pred,predName))
			}
			ELSIF (classid = startclassid OR classid = endeclassid OR classid = entscheidungclassid OR classid = kombinationclassid OR classid = parallelitätclassid) {
				CC "Core" GET_ATTR_VAL objid: (fromobjid) attrname: "Station" 
				IF (val > lstations) {
					SET lstations: (val)
				}
				CC "Core" GET_ATTR_VAL objid: (fromobjid) attrname: "Vorgänger"
				SETL predName: (val)
				pred: (tokunion(pred, predName))
			}			
		}
	CC "Core" SET_ATTR_VAL objid: (currentid) attrname: "Station" val: (lstations)
	SET cstations:(lstations)
	CC "Core" SET_ATTR_VAL objid: (currentid) attrname: "Vorgänger" val: (pred)
	SET pred: ""
			     
     # We add the current object to the list of visited objects
      SET visitedobjs:(tokunion(visitedobjs,o))
     
     # We remove the current object from the list of remaining objects
     SET remainingids:(tokdiff(remainingids,o))
        
            # We get the outgoing connectors from the current object
            CC "Core" GET_CONNECTORS objid:(VAL o) out
            # We iterate over all these outgoing connectors
            FOR r in:(objids) {
                # We get the endpoints of the current connector
                CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL r)
                # We get the class id of the to-object of the current connector
                CC "Core" GET_CLASS_ID objid:(toobjid)
                # If the connected object has not been visited
                IF (tokcnt(tokisect(visitedobjs,STR toobjid))=0) {
                    # We add the object to the list of remaining objects
                    SET remainingids:(tokunion(remainingids,STR toobjid))         
				}
			}
}
}

	

#Update ATTR "Stationen" of all Sud-Objects
# We retrieve all objects of the class with the name Sud
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL modelid) classname: "Sud"

SET sudids:(objids)
SET sudnr:1
SET sudName:""
SET nrsud:(tokcnt(sudids))
WHILE (tokcnt(sudids)>0) {
    # We store the current list of remaining objects for iterating over them
    SET currentbatch:(sudids)
    
    # We iterate over all remaining objects 
    FOR o in:(currentbatch) {
		SETL sudid: (VAL o)
		CC "Core" SET_ATTR_VAL objid: (VAL o) attrname: "Stationen" val: (cstations-1)
		CC "Core" SET_ATTR_VAL objid: (VAL o) attrname: "ID" val: (sudnr)
		#Update Sud-ID in Programm-Plan
		CC "Core" GET_OBJ_NAME objid: (VAL o) 
		SET sudName:(lower(objname))
		IF (sudName SUB (LEN(sudName)-1) = " ") {
			SET sudName: (copy(sudName, 0, (LEN (sudName)-1)))
		}
		 CC "Core" GET_ATTR_ID classid: (startclassid) attrname: ("Programm")
		SET id_record: (attrid) 
		CC "Core" GET_REC_ATTR_ROW_COUNT objid: (startid) attrid: (id_record)
		SET rcount: (count)
		FOR  i from:0 to: (rcount) {
			CC "Core" GET_REC_ATTR_ROW_ID objid: (startid)  attrid: (id_record) index: (i)
			SETL rowID: (rowid)
		    # get the attribute ID of the INTERREF column
			 CC "Core" GET_CLASS_ID objid: (rowID)
			SETL nRowClassID: (classid)
			CC "Core" GET_ATTR_ID classid: (nRowClassID) attrname: ("Sud")
			SETL nColumnKeyAttrID: (attrid)
			# Get the values
			CC "Core" GET_ATTR_VAL objid: (rowID) attrid: (nColumnKeyAttrID)  
			SET pSudName: (val)
			SET pSudName: (lower(pSudName))
			IF (LEN(pSudName) > 0) {
		IF (pSudName SUB (LEN(pSudName)-1) = " ") {
			SET pSudName: (copy(pSudName, 0, (LEN (pSudName)-1)))
		}
		}
			IF (pSudName = sudName) {
				CC "Core" SET_ATTR_VAL objid: (rowID)  attrname: "SudID" val:(sudnr)
			}
		}		
	}
	SET sudnr:(sudnr+1)
	SET sudids:(tokdiff(sudids,o))
}

#Make sure every Sud-Entry in the programm has an ID
		FOR  i from:1 to: (rcount) {
			CC "Core" GET_REC_ATTR_ROW_ID objid: (startid)  attrid: (id_record) index: (i)
			SETL rowID: (rowid)
		    # get the attribute ID of the INTERREF column
			 CC "Core" GET_CLASS_ID objid: (rowID)
			SETL nRowClassID: (classid)
			CC "Core" GET_ATTR_ID classid: (nRowClassID) attrname: ("SudID")
			SETL nColumnKeyAttrID: (attrid)
			# Get the values
			CC "Core" GET_ATTR_VAL objid: (rowID) attrname: "SudID"  
			IF (val = 0) {
				   CC "Core" GET_ATTR_VAL objid: (rowID) attrname: "Sud"  
				   IF (val != "Reinigung") {
				   CC "AdoScript" ERRORBOX ("Kein Sudrezept für " + mstr(val) + " gefunden. Bitte Namen überprüfen.")
				   EXIT
				   }
			}
		}	

#Update ATTR "Stationen" of Start-Object
CC "Core" SET_ATTR_VAL objid: (startid) attrname: "Stationen" val: (cstations-1)
CC "Core" SET_ATTR_VAL objid: (startid)  attrname: "Sude" val: (nrsud)
EXECUTE file:"db:\\sortProgrammfw.asc"


#Update ATTR of Sudreinigung
SET cleannr:(sudnr)
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL modelid) classname: "Sudhausreinigung"
SET cleanids:(objids)
SET nrclean:(tokcnt(cleanids))

#Get the station-Nr of the Sudhaus
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid: (VAL modelid) classname: "Sudhaus"
SET sudhausids:(objids)
SET sudhausstation:1
FOR o in:(sudhausids) {
	CC "Core" GET_ATTR_VAL objid: (VAL o) attrname: "Station" 
	sudhausstation:(val)
}

WHILE (tokcnt(cleanids)>0) {
    # We store the current list of remaining objects for iterating over them
    SET currentbatch:(cleanids)
    
    # We iterate over all remaining objects 
    FOR o in:(currentbatch) {
		SETL cleanid: (VAL o)
		CC "Core" SET_ATTR_VAL objid: (VAL o) attrname: "ID" val: (cleannr)
		CC "Core" SET_ATTR_VAL objid: (VAL o) attrname: "Stationen" val: (sudhausstation)
		#Update Sud-ID in Programm-Plan
		CC "Core" GET_OBJ_NAME objid: (VAL o) 
		SET sudName: (lower(objname))
		 CC "Core" GET_ATTR_ID classid: (startclassid) attrname: ("Programm")
		SET id_record: (attrid) 
		CC "Core" GET_REC_ATTR_ROW_COUNT objid: (startid) attrid: (id_record)
		FOR  i from:0 to: (count) {
			CC "Core" GET_REC_ATTR_ROW_ID objid: (startid)  attrid: (id_record) index: (i)
			SETL rowID: (rowid)
		    # get the attribute ID of the INTERREF column
			 CC "Core" GET_CLASS_ID objid: (rowID)
			SETL nRowClassID: (classid)
			CC "Core" GET_ATTR_ID classid: (nRowClassID) attrname: ("Sud")
			SETL nColumnKeyAttrID: (attrid)
			# Get the values
			CC "Core" GET_ATTR_VAL objid: (rowID) attrid: (nColumnKeyAttrID)  
			SET pSudName: (lower(val))
			IF (pSudName = sudName OR val = "Reinigung") {
				CC "Core" SET_ATTR_VAL objid: (rowID)  attrname: "SudID" val:(cleannr)
			}
		}		
	}
	SET cleannr:(cleannr+1)
	SET cleanids:(tokdiff(cleanids,o))
}

#Update ATTR of Tankreinigung
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL modelid) classname: "Tankreinigung"
SET cleanids:(objids)
SET nrclean:(tokcnt(cleanids))

WHILE (tokcnt(cleanids)>0) {
    # We store the current list of remaining objects for iterating over them
    SET currentbatch:(cleanids)
    
    # We iterate over all remaining objects 
    FOR o in:(currentbatch) {
		SETL cleanid: (VAL o)
		CC "Core" SET_ATTR_VAL objid: (VAL o) attrname: "ID" val: (cleannr)	
	}
	SET cleannr:(cleannr+1)
	SET cleanids:(tokdiff(cleanids,o))
}

# exportmodel
CC "Core" GET_ATTR_VAL objid: (startid) attrname: "Pfad Simulationsoutput" 
SET sPath: (val)
IF (sPath = "") {
	CC "AdoScript" DIRECTORY_DIALOG open
	SET sPath: ( path )
}

SET sPathxml: (sPath + "brauModel.xml")
CC "Core" SET_ATTR_VAL objid: (startid) attrname: "Pfad Simulationsoutput" val: (sPath)

CC "Documentation" XML_MODELS modelids:(modelid) mgroupids:("") attrprofs:("") apgroups:("")
CC "AdoScript" FWRITE file: (sPathxml) text:(xml) binary:0

#Start Java-Program
CC "Core" GET_ATTR_VAL objid: (startid) attrname: "Pfad Simulationsprogramm"
SET javaPath: (val) 
SET javaPath: (replall(javaPath, "\\", "\\\\"))

SET javaText: ("cd " + javaPath + "\n java -jar --add-modules=java.xml.bind Simulation.jar " + sPath + " forward")
CC "AdoScript" FWRITE file:(sPath + "startJava.bat") text:( javaText ) binary:0 

SYSTEM ("cmd /c " + sPath + "\startJava.bat"  + "|| pause") with-console-window result:rc
IF (rc != 0) {
	CC "AdoScript" INFOBOX ("Ein Fehler ist bei der Ausführung des Java-Programms aufgetreten. Bitte die Pfadangaben im brauStart-Element überprüfen")
	}
	ELSE {
		SET filePath: (sPath + "Simulationlog.txt")
	CC "AdoScript" FREAD file:(filePath)
	SET txtData: ( text )
	CC "AdoScript" EDITBOX text:("Die Simulation wurde durchgeführt. Die entsprechenden Daten sind unter Simulationsrun.csv und Simulationslog.csv gespeichert\n\n" + txtData) title: "Ergebnisse" oktext: "Wiederholen"
		IF (endbutton = "ok") {
			EXECUTE file:"db:\\runSimulation.asc"
		}
	}
	



